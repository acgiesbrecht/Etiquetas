/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chortitzer.industria.zebra;

import ca.odell.glazedlists.GlazedLists;
import ca.odell.glazedlists.swing.AutoCompleteSupport;
import com.chortitzer.industria.zebra.domain.bal.Formulas;
import com.chortitzer.industria.zebra.domain.bal.Productox;
import com.chortitzer.industria.zebra.domain.bal.TblEtiquetadoraContenido;
import com.chortitzer.industria.zebra.util.Utils;
import com.google.common.base.Joiner;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.persistence.NoResultException;

/**
 *
 * @author Industria
 */
public class PanelBal extends javax.swing.JPanel {

    DecimalFormat myFormatter = new DecimalFormat("#.00");
    DecimalFormat myFormatterInt = new DecimalFormat("#");
    Date FechaVencBal;
    Date FechaVencSal;
    TblEtiquetadoraContenido contenido;
    Formulas formulaActual;
    String nombre_completo;
    String indiciacionesDeUso = "INDICACIONES:\\&";
    String ingredientes = "INGREDIENTES:\\&";
    String nivelesDeGarantia = "NIVELES DE GARANTIA:\\&";
    String descripcion;
    String pb = "";
    String ed = "";
    String pbTC = "";
    String pbBS = "";
    String edTC = "";
    String edBS = "";
    String humedadTC = "";
    String grasaTC = "";
    String fibraTC = "";
    String cenizasTC = "";
    String calcio = "";
    String fosforo = "";
    String vitATC = "";
    String vitDTC = "";
    String vitETC = "";
    String NNP = "";
    String S = "";
    String Mg = "";
    String Na = "";
    String Co = "";
    String Cu = "";
    String Se = "";
    String Mn = "";
    String Zn = "";
    String Y = "";
    String Fe = "";
    String Cr = "";
    String fechaElab = "";
    String fechaVenc = "";
    String senacsaReg = "";
    String animalDestino = "";

    /**
     * Creates new form PanelBal
     */
    public PanelBal() {
        initComponents();

        calcularFechas();

        List<Formulas> empresaEntityList = em.createQuery("select t from Formulas t order by t.nombre").getResultList();
        //AutoCompleteDecorator.decorate(this.cboEmpresa);

        AutoCompleteSupport support = AutoCompleteSupport.install(
                this.cboProducto, GlazedLists.eventListOf(empresaEntityList.toArray()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        em = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("bal_PU").createEntityManager();
        dtpFechaElab = new org.jdesktop.swingx.JXDatePicker();
        cboLinea = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cboProducto = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtIndicaciones = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtIngredientes = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtNiveles = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        dtpFechaVenc = new org.jdesktop.swingx.JXDatePicker();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cboPeso = new javax.swing.JComboBox();
        txtSenacsaReg = new javax.swing.JTextField();
        txtLote = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cboTurno = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        dtpFechaElab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dtpFechaElabActionPerformed(evt);
            }
        });

        cboLinea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2" }));
        cboLinea.setToolTipText("");

        jLabel2.setText("Linea");

        cboProducto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cargando..." }));
        cboProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProductoActionPerformed(evt);
            }
        });

        jLabel1.setText("Fecha Elaboracion");

        btnCancel.setText("CANCELAR");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnPrint.setBackground(new java.awt.Color(204, 255, 204));
        btnPrint.setText("IMPRIMIR");
        btnPrint.setEnabled(false);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        txtIndicaciones.setEditable(false);
        txtIndicaciones.setColumns(20);
        txtIndicaciones.setLineWrap(true);
        txtIndicaciones.setRows(2);
        jScrollPane2.setViewportView(txtIndicaciones);

        jLabel8.setText("Ingredientes");

        txtIngredientes.setEditable(false);
        txtIngredientes.setColumns(20);
        txtIngredientes.setLineWrap(true);
        txtIngredientes.setRows(5);
        jScrollPane1.setViewportView(txtIngredientes);

        jLabel10.setText("Niveles de Garantia");

        txtNiveles.setEditable(false);
        txtNiveles.setColumns(20);
        txtNiveles.setLineWrap(true);
        txtNiveles.setRows(2);
        jScrollPane3.setViewportView(txtNiveles);

        jLabel9.setText("Indicaciones");

        txtCantidad.setText("1");

        jLabel7.setText("Producto");

        jLabel12.setText("Registro SENACSA");

        cboPeso.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "25", "30", "40", "50", "Granel" }));

        txtLote.setText("1");
        txtLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLoteActionPerformed(evt);
            }
        });

        jLabel5.setText("Peso (Kg)");

        jLabel6.setText("Cantidad de Etiquetas");

        jLabel3.setText("Turno");

        cboTurno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2" }));

        jLabel4.setText("Lote");

        jLabel11.setText("Fecha Vencimiento");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 738, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dtpFechaElab, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(49, 49, 49)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cboProducto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtCantidad)
                                    .addComponent(cboTurno, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cboLinea, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtLote)
                                    .addComponent(cboPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dtpFechaVenc, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSenacsaReg, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dtpFechaElab, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dtpFechaVenc, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboLinea, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLote, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSenacsaReg, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(155, 155, 155))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void calcularFechas() {
        Date hoy = new Date();
        Calendar c = Calendar.getInstance();
        c.setTime(hoy);

        dtpFechaElab.setDate(hoy);
        c.add(Calendar.MONTH, 3);
        FechaVencBal = c.getTime();
        c.add(Calendar.MONTH, 3);
        FechaVencSal = c.getTime();
    }

    private void dtpFechaElabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dtpFechaElabActionPerformed
        calcularFechas();
    }//GEN-LAST:event_dtpFechaElabActionPerformed

    private void cboProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProductoActionPerformed

        //
        try {
            if (cboProducto.getSelectedIndex() > -1) {

                formulaActual = (Formulas) cboProducto.getSelectedItem();

                Calendar c = Calendar.getInstance();
                String ano = String.valueOf(c.get(Calendar.YEAR));

                String jpql = "select max(i.lote) from TblEtiquetadoraImpresion i where FUNC('YEAR', i.fechahora) = " + ano + " and i.idFormula = " + formulaActual.getNroID().toString();
                // System.out.println(jpql);
                Object res = null;//em.createQuery(jpql).getSingleResult();
                int lastLote = 0;
                if (res != null) {
                    lastLote = (Integer) res;
                }

                txtLote.setText(String.valueOf(lastLote + 1));

                List<Productox> lProd = em.createQuery("select p from Productox p, Datosx d where p.nroID = d.idp and d.idf = " + formulaActual.getNroID().toString() + " and d.set > 0 order by d.set desc").getResultList();
                txtIngredientes.setText(Joiner.on(", ").join(lProd.toArray()));

                contenido = getContenido(formulaActual.getNroID().toString());
                if (contenido != null) {

                    txtIndicaciones.setText(contenido.getModoDeUso());

                    txtSenacsaReg.setText(String.valueOf(contenido.getRegistroMag()));

                    humedadTC = String.valueOf(1000 - contenido.getHumedad());
                    pb = myFormatterInt.format(contenido.getProteina());
                    pbTC = myFormatter.format(contenido.getProteina() / 10);
                    pbBS = myFormatter.format(contenido.getProteina() * 10.0 / (100.0 - contenido.getHumedad() / 10.0));
                    ed = myFormatterInt.format(contenido.getEnergiaDigestible());
                    edTC = myFormatterInt.format(contenido.getEnergiaDigestible() * 100 * (4.4 / 100));
                    edBS = myFormatterInt.format(contenido.getEnergiaDigestible() * 100 * (4.4 / 100) * 100 / (100 - contenido.getHumedad() / 10));

                    if (contenido.getCategoria().equals("B")) {
                        txtNiveles.setText(getNivelesBalanceados());
                        dtpFechaVenc.setDate(FechaVencBal);
                    } else if (contenido.getCategoria().equals("S")) {
                        txtNiveles.setText(getNivelesSales());
                        dtpFechaVenc.setDate(FechaVencSal);
                        nombre_completo = contenido.getNombreCompleto();
                    }

                    nivelesDeGarantia = txtNiveles.getText();

                    btnPrint.setEnabled(true);
                }
            }

        } catch (Exception e) {
            Utils.messageBox(e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_cboProductoActionPerformed

    private String getNivelesBalanceados() {
        grasaTC = myFormatterInt.format(contenido.getGrasa());
        fibraTC = myFormatterInt.format(contenido.getFda());
        cenizasTC = myFormatterInt.format(contenido.getMineralesTotales());
        calcio = myFormatterInt.format(contenido.getCalcio());
        fosforo = myFormatterInt.format(contenido.getFosforo());
        vitATC = myFormatterInt.format(contenido.getVitA());
        vitDTC = myFormatterInt.format(contenido.getVitD());
        vitETC = myFormatterInt.format(contenido.getVitE());
        animalDestino = contenido.getAnimalDestino().toUpperCase();

        return ("Matertia Seca: " + humedadTC
                + " g/Kg, Nutrientes Digestibles Totales: " + ed
                + " g/Kg, Proteina: " + pb
                + " g/Kg, Grasas: " + grasaTC
                + " g/Kg, FDA: " + fibraTC
                + " g/Kg, Minerales totales: " + cenizasTC
                + " g/Kg, Calcio: " + calcio
                + " g/Kg, Fosforo: " + fosforo
                + " mg/Kg, Vitamina A: " + vitATC
                + " UI/Kg, Vitamina D: " + vitDTC
                + " UI/Kg, Vitamina E: " + vitETC + " UI/Kg.");
    }

    private String getNivelesSales() {
        grasaTC = myFormatterInt.format(contenido.getGrasa());
        fibraTC = myFormatterInt.format(contenido.getFda());
        cenizasTC = myFormatterInt.format(contenido.getMineralesTotales());
        calcio = myFormatterInt.format(contenido.getCalcio());
        fosforo = myFormatterInt.format(contenido.getFosforo());
        NNP = myFormatterInt.format(contenido.getNnp());
        S = myFormatterInt.format(contenido.getS());
        Mg = myFormatterInt.format(contenido.getMg());
        Na = myFormatterInt.format(contenido.getNa());
        Co = myFormatterInt.format(contenido.getCo());
        Cu = myFormatterInt.format(contenido.getCu());
        Se = myFormatterInt.format(contenido.getSe());
        Mn = myFormatterInt.format(contenido.getMn());
        Zn = myFormatterInt.format(contenido.getZn());
        Y = myFormatterInt.format(contenido.getY());
        Fe = myFormatterInt.format(contenido.getFe());
        Cr = myFormatterInt.format(contenido.getCr());
        animalDestino = contenido.getAnimalDestino().toUpperCase();

        return ("Matertia Seca: " + humedadTC + " g/Kg"
                + "Nutrientes Digestibles Totales: " + ed + " g/Kg"
                + "Proteina: " + pb + " g/Kg"
                + "Grasas: " + grasaTC + " g/Kg"
                + "Calcio: " + calcio + " g/Kg"
                + "Fosforo: " + fosforo);
    }

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed

    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed

        if (contenido.getCategoria().equals("B")) {
            Utils.rawPrint(getZplBalanceados());
        } else if (contenido.getCategoria().equals("S")) {
            Utils.rawPrint(getZplSales());
        }

        /*        TblEtiquetadoraImpresion impresion = new TblEtiquetadoraImpresion();

        impresion.setFechahora(dtpFechaElab.getDate());
        impresion.setIdFormula(formulaActual.getNroID());
        impresion.setCantidad(Integer.valueOf(txtCantidad.getText()));
        /*
         em.getTransaction().begin();
         em.persist(impresion);
         em.getTransaction().commit();*/
    }//GEN-LAST:event_btnPrintActionPerformed

    private void txtLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLoteActionPerformed

    public String getZplBalanceados() {
        String producto = cboProducto.getSelectedItem().toString();

        DecimalFormat myFormatterLote = new DecimalFormat("000");
        String lote = myFormatterLote.format(Integer.parseInt(txtLote.getText()));
        String linea = cboLinea.getSelectedItem().toString();
        String turno = cboTurno.getSelectedItem().toString();
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat dfs = new SimpleDateFormat("yyMMddHHmm");
        fechaElab = df.format(dtpFechaElab.getDate());
        String fechaPrint = dfs.format(new Date());
        fechaVenc = df.format(dtpFechaVenc.getDate());
        String cantidad = txtCantidad.getText();
        String peso = cboPeso.getSelectedItem().toString();
        String pesoNeto = "Peso Neto: " + peso + " Kg";

        if (peso.equals("Granel")) {
            pesoNeto = peso;
        }

        senacsaReg = " - Reg. SENACSA: " + txtSenacsaReg.getText();

        if (txtSenacsaReg.getText().equals("XXX")) {
            senacsaReg = "";
        }

        String nombreAnimalDestino = "PARA ";
        switch (animalDestino) {
            case "BOVINO":
                nombreAnimalDestino += "BOVINOS";
                break;
            case "CABALLO":
                nombreAnimalDestino += "EQUINOS";
                break;
            case "AVE":
                nombreAnimalDestino += "AVES";
                break;
            case "OVINO":
                nombreAnimalDestino += "OVINOS";
                break;
            case "SUINO":
                nombreAnimalDestino += "SUINOS";
                break;
            default:
                nombreAnimalDestino = "";
                break;
        }

        String base = "^XA"
                + "^MTD"
                + "^PW799"
                + "^CI27"
                + "^FO150,30^GB625,1100,2^FS" //cuadro principal
                + "^FO455,30^GB0,1100,2^FS" // 1era horiz
                + "^FO610,30^GB0,1100,2^FS" // 2da horiz
                + "^FO610,393^GB165,0,2^FS"
                + "^FO610,767^GB165,0,2^FS"
                + "^FO25,970^XGE:LC100.GRF,1,1^FS"
                + "^FO25,55^XGE:LB100.GRF,1,1^FS"
                + "^FO470,50^XGE:" + animalDestino + ".GRF,1,1^FS"
                + "^FT100,942^A0B,71,70^FB720,1,0,C^FH\\^FD" + producto + "^FS"
                + "^FT140,942^A0B,28,28^FB720,1,0,C^FH\\^FD" + nombreAnimalDestino + senacsaReg + "^FS"
                //+ "^FO30,55^BY2^BEB,80,Y,N^FD" + fechaElabBc + lote + turno + linea + "^FS"
                + "^FT180,1115^A0B,20,19^FB1020,1,0,L^FH\\^FD" + "INDICACIONES:" + "^FS"
                + "^FT252,1115^A0B,20,19^FB1020,3,0,L^FH\\^FD" + txtIndicaciones.getText() + "^FS"
                + "^FT282,1115^A0B,20,19^FB1020,1,0,L^FH\\^FD" + "COMPOSICION:" + "^FS"
                + "^FT352,1115^A0B,20,19^FB1020,3,0,L^FH\\^FD" + txtIngredientes.getText() + "^FS"
                + "^FT384,1115^A0B,20,19^FB1020,1,0,L^FH\\^FD" + "NIVELES DE GARANTIA:" + "^FS"
                + "^FT456,1115^A0B,20,19^FB1020,3,0,L^FH\\^FD" + txtNiveles.getText() + "^FS"
                + "^FT549,1115^A0B,39,38^FH\\^FDProteina Bruta (%):^FS"
                + "^FT597,1115^A0B,39,38^FH\\^FDEnergia Dig. (Kcal/Kg):^FS"
                + "^FT498,656^A0B,28,28^FB200,1,0,R^FH\\^FDBase natural^FS"
                + "^FT498,831^A0B,28,28^FB200,1,0,R^FH\\^FDBase seca^FS"
                + "^FT549,656^A0B,39,38^FB200,1,0,R^FH\\^FD" + pbTC + "^FS"
                + "^FT597,656^A0B,39,38^FB200,1,0,R^FH\\^FD" + edTC + "^FS"
                + "^FT549,831^A0B,39,38^FB200,1,0,R^FH\\^FD" + pbBS + "^FS"
                + "^FT597,831^A0B,39,38^FB200,1,0,R^FH\\^FD" + edBS + "^FS"
                + "^FT561,440^A0B,16,15^FH\\^FD*Calculo Estimativa ED:^FS"
                + "^FT579,440^A0B,16,15^FH\\^FDNDT=PB+(EE*2,25)+ENN^FS"
                + "^FT597,440^A0B,16,15^FH\\^FDED(Kcal/Kg)=NDT*4.409^FS"
                + "^FT658,1115^A0B,28,28^FH\\^FDFecha Elab.: " + fechaElab + "^FS"
                + "^FT692,1115^A0B,28,28^FH\\^FDFecha Venc.: " + fechaVenc + "^FS"
                + "^FT726,1115^A0B,28,28^FH\\^FDLote: " + lote + "  Linea: " + linea + "  Turno: " + turno + "^FS"
                + "^FT760,1115^A0B,28,28^FH\\^FDSecuencia: " + fechaPrint + "0001^SFAAAAAAAAAAAAAAAAAAAAAdddd,1^FS"
                + "^FT685,767^A0B,51,50^FB374,1,0,C^FH\\^FD" + pesoNeto + "^FS"
                //+ "^FT730,767^A0B,20,19^FB374,1,0,C^FH\\^FD" + senacsaReg + "^FS"
                + "^FT730,767^A0B,20,19^FB374,1,0,C^FH\\^FDDr. med. vet. Kornelius Kaethler^FS"
                + "^FT754,767^A0B,20,19^FB374,1,0,C^FH\\^FDRegente Tecnico MAG Nro.: 1979^FS"
                + "^FT643,370^A0B,24,23^FB320,1,0,R^FH\\^FDCooperativa Chortitzer Ltda.^FS"
                + "^FT671,370^A0B,24,23^FB320,1,0,R^FH\\^FDHabilitacion SENACSA Nro. 832^FS"
                + "^FT699,370^A0B,24,23^FB320,1,0,R^FH\\^FDTel.: (0492) 418 605^FS"
                + "^FT727,370^A0B,24,23^FB320,1,0,R^FH\\^FDAvda. Central 926 - Loma Plata^FS"
                + "^FT755,370^A0B,24,23^FB320,1,0,R^FH\\^FDINDUSTRIA PARAGUAYA^FS"
                + "^PQ" + cantidad + ",0,1,Y"
                + "^XZ";
        return base;

    }

    public String getZplSales() {
        String producto = cboProducto.getSelectedItem().toString();
        DecimalFormat myFormatterLote = new DecimalFormat("000");
        String lote = myFormatterLote.format(Integer.parseInt(txtLote.getText()));
        String linea = cboLinea.getSelectedItem().toString();
        String turno = cboTurno.getSelectedItem().toString();
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat dfs = new SimpleDateFormat("yyMMddHHmm");
        fechaElab = df.format(dtpFechaElab.getDate());
        String fechaPrint = dfs.format(new Date());
        fechaVenc = df.format(dtpFechaVenc.getDate());
        String cantidad = txtCantidad.getText();
        String peso = cboPeso.getSelectedItem().toString();
        String pesoNeto = "Peso Neto: " + peso + " Kg";

        if (peso.equals("Granel")) {
            pesoNeto = peso;
        }

        senacsaReg = " - Reg. SENACSA: " + txtSenacsaReg.getText();

        if (txtSenacsaReg.getText().equals("XXX")) {
            senacsaReg = "";
        }

        String nombreAnimalDestino = "PARA ";
        switch (animalDestino) {
            case "BOVINO":
                nombreAnimalDestino += "BOVINOS";
                break;
            case "CABALLO":
                nombreAnimalDestino += "EQUINOS";
                break;
            case "AVE":
                nombreAnimalDestino += "AVES";
                break;
            case "OVINO":
                nombreAnimalDestino += "OVINOS";
                break;
            case "SUINO":
                nombreAnimalDestino += "SUINOS";
                break;
            default:
                nombreAnimalDestino = "";
                break;
        }

        String base = "^XA"
                + "^MTD"
                + "^PW799"
                + "^CI27"
                //+ "^FO150,30^GB625,1100,2^FS" //cuadro principal
                + "^FO15,180^GB775,920,2^FS" //cuadro principal
                //+ "^FO455,30^GB0,1100,2^FS" // 1era horiz
                + "^FO15,390^GB775,0,2^FS" // 1era horiz
                + "^FO15,940^GB775,0,2^FS" // 2da horiz
                + "^FO412,390^GB0,710,2^FS" // 1era vertical
                //+ "^FO610,30^GB0,1100,2^FS" // 2da horiz
                //+ "^FO610,393^GB165,0,2^FS"
                //+ "^FO610,767^GB165,0,2^FS"
                //+ "^FO25,970^XGE:LC100.GRF,1,1^FS"
                + "^FO25,30^XGE:LB100N.GRF,1,1^FS"
                //+ "^FO470,50^XGE:" + animalDestino + ".GRF,1,1^FS"
                //+ "^FT100,942^A0B,71,70^FB720,1,0,C^FH\\^FD" + producto + "^FS"
                + "^FT200,100^A0N,71,70^FB600,1,0,C^FD" + producto + "^FS"
                + "^FT200,130^A0N,28,27^FB600,1,0,C^FH\\^FD" + nombre_completo + "^FS"
                + "^FT200,165^A0N,25,24^FB600,1,0,C^FH\\^FD" + nombreAnimalDestino + senacsaReg + "^FS"
                //+ "^FT180,1115^A0B,20,19^FB1020,1,0,L^FH\\^FD" + "INDICACIONES:" + "^FS"
                //+ "^FT252,1115^A0B,20,19^FB1020,3,0,L^FH\\^FD" + txtIndicaciones.getText() + "^FS"
                //+ "^FT282,1115^A0B,20,19^FB1020,1,0,L^FH\\^FD" + "COMPOSICION:" + "^FS"
                //+ "^FT352,1115^A0B,20,19^FB1020,3,0,L^FH\\^FD" + txtIngredientes.getText() + "^FS"

                + "^FT25,205^A0N,20,19^FB755,1,0,L^FH\\^FD" + "INDICACIONES:" + "^FS"
                + "^FT25,301^A0N,20,19^FB755,4,0,L^FH\\^FD" + txtIndicaciones.getText() + "^FS"
                + "^FT25,331^A0N,20,19^FB755,1,0,L^FH\\^FD" + "COMPOSICION:" + "^FS"
                + "^FT25,379^A0N,20,19^FB755,2,0,L^FH\\^FD" + txtIngredientes.getText() + "^FS"
                //+ "^FT384,1115^A0B,20,19^FB1020,1,0,L^FH\\^FD" + "NIVELES DE GARANTIA:" + "^FS"
                //+ "^FT456,1115^A0B,20,19^FB1020,3,0,L^FH\\^FD" + txtNiveles.getText() + "^FS"

                + "^FT25,420^A0N,20,19^FB402,1,0,L^FH\\^FD" + "NIVELES DE GARANTIA:" + "^FS"
                + "^FT25,450^A0N,25,24^FH\\^FD" + "Materia Seca" + "^FS"
                + "^FT150,450^A0N,25,24^FB250,1,0,R^FH\\^FD" + humedadTC + " g/Kg" + "^FS"
                + "^FT25,479^A0N,25,24^FH\\^FD" + "N.D.T." + "^FS"
                + "^FT150,479^A0N,25,24^FB250,1,0,R^FH\\^FD" + ed + " g/Kg" + "^FS"
                + "^FT25,508^A0N,25,24^FH\\^FD" + "Proteina Cruda" + "^FS"
                + "^FT150,508^A0N,25,24^FB250,1,0,R^FH\\^FD" + pb + " g/Kg" + "^FS"
                + "^FT25,537^A0N,25,24^FH\\^FD" + "N.N.P. equiv. Prot." + "^FS"
                + "^FT150,537^A0N,25,24^FB250,1,0,R^FH\\^FD" + NNP + " g/Kg" + "^FS"
                + "^FT25,566^A0N,25,24^FH\\^FD" + "Ca " + "^FS"
                + "^FT150,566^A0N,25,24^FB250,1,0,R^FH\\^FD" + calcio + " g/Kg" + "^FS"
                + "^FT25,595^A0N,25,24^FH\\^FD" + "P" + "^FS"
                + "^FT150,595^A0N,25,24^FB250,1,0,R^FH\\^FD" + fosforo + " g/Kg" + "^FS"
                + "^FT25,624^A0N,25,24^FH\\^FD" + "S" + "^FS"
                + "^FT150,624^A0N,25,24^FB250,1,0,R^FH\\^FD" + S + " mg/Kg" + "^FS"
                + "^FT25,653^A0N,25,24^FH\\^FD" + "Mg" + "^FS"
                + "^FT150,653^A0N,25,24^FB250,1,0,R^FH\\^FD" + Mg + " mg/Kg" + "^FS"
                + "^FT25,682^A0N,25,24^FH\\^FD" + "Na" + "^FS"
                + "^FT150,682^A0N,25,24^FB250,1,0,R^FH\\^FD" + Na + " g/Kg" + "^FS"
                + "^FT25,711^A0N,25,24^FH\\^FD" + "Co" + "^FS"
                + "^FT150,711^A0N,25,24^FB250,1,0,R^FH\\^FD" + Co + " mg/Kg" + "^FS"
                + "^FT25,740^A0N,25,24^FH\\^FD" + "Cu" + "^FS"
                + "^FT150,740^A0N,25,24^FB250,1,0,R^FH\\^FD" + Cu + " mg/Kg" + "^FS"
                + "^FT25,769^A0N,25,24^FH\\^FD" + "Se" + "^FS"
                + "^FT150,769^A0N,25,24^FB250,1,0,R^FH\\^FD" + Se + " mg/Kg" + "^FS"
                + "^FT25,798^A0N,25,24^FH\\^FD" + "Mn" + "^FS"
                + "^FT150,798^A0N,25,24^FB250,1,0,R^FH\\^FD" + Mn + " mg/Kg" + "^FS"
                + "^FT25,827^A0N,25,24^FH\\^FD" + "Zn" + "^FS"
                + "^FT150,827^A0N,25,24^FB250,1,0,R^FH\\^FD" + Zn + " mg/Kg" + "^FS"
                + "^FT25,856^A0N,25,24^FH\\^FD" + "Y" + "^FS"
                + "^FT150,856^A0N,25,24^FB250,1,0,R^FH\\^FD" + Y + " mg/Kg" + "^FS"
                + "^FT25,885^A0N,25,24^FH\\^FD" + "Fe" + "^FS"
                + "^FT150,885^A0N,25,24^FB250,1,0,R^FH\\^FD" + Fe + " mg/Kg" + "^FS"
                + "^FT25,914^A0N,25,24^FH\\^FD" + "Cr" + "^FS"
                + "^FT150,914^A0N,25,24^FB250,1,0,R^FH\\^FD" + Cr + " mg/Kg" + "^FS"
                //+ "^FT549,1115^A0B,39,38^FH\\^FDProteina Bruta (%):^FS"
                //+ "^FT597,1115^A0B,39,38^FH\\^FDEnergia Dig. (Kcal/Kg):^FS"
                //+ "^FT498,656^A0B,28,28^FB200,1,0,R^FH\\^FDBase natural^FS"

                + "^FT422,460^A0N,29,28^FH\\^FDProteina Bruta (%):^FS"
                + "^FT422,500^A0N,29,28^FH\\^FDEnergia Dig. (Kcal/Kg):^FS"
                + "^FT572,420^A0N,20,19^FB200,1,0,R^FH\\^FDBase natural^FS"
                //+ "^FT498,831^A0B,28,28^FB200,1,0,R^FH\\^FDBase seca^FS"
                //+ "^FT549,656^A0B,39,38^FB200,1,0,R^FH\\^FD" + pbTC + "^FS"
                //+ "^FT597,656^A0B,39,38^FB200,1,0,R^FH\\^FD" + edTC + "^FS"

                + "^FT572,460^A0N,29,28^FB200,1,0,R^FH\\^FD" + pbTC + "^FS"
                + "^FT572,500^A0N,29,28^FB200,1,0,R^FH\\^FD" + edTC + "^FS"
                + "^FO506,540^XGE:" + animalDestino + "N.GRF,1,1^FS"
                //+ "^FT549,831^A0B,39,38^FB200,1,0,R^FH\\^FD" + pbBS + "^FS"
                //+ "^FT597,831^A0B,39,38^FB200,1,0,R^FH\\^FD" + edBS + "^FS"
                //+ "^FT561,440^A0B,16,15^FH\\^FD*Calculo Estimativa ED:^FS"
                //+ "^FT579,440^A0B,16,15^FH\\^FDNDT=PB+(EE*2,25)+ENN^FS"
                //+ "^FT597,440^A0B,16,15^FH\\^FDED(Kcal/Kg)=NDT*4.409^FS"

                //+ "^FT685,767^A0B,51,50^FB374,1,0,C^FH\\^FD" + pesoNeto + "^FS"
                //+ "^FT730,767^A0B,20,19^FB374,1,0,C^FH\\^FDSENACSA Reg. Nro.: " + senacsaReg + "^FS"
                //+ "^FT754,767^A0B,20,19^FB374,1,0,C^FH\\^FDRegente Tecnico MAG Nro.: 1979^FS"

                + "^FT422,740^A0N,51,50^FB374,1,0,C^FH\\^FD" + pesoNeto + "^FS"
                //+ "^FT422,792^A0N,20,19^FB374,1,0,C^FH\\^FDSENACSA Reg. Nro. Prod.: " + senacsaReg + "^FS"
                //+ "^FT422,816^A0N,20,19^FB374,1,0,C^FH\\^FDSENACSA Reg. Nro. Fabrica: " + senacsaReg + "^FS"
                + "^FT422,840^A0N,20,19^FB374,1,0,C^FH\\^FDRegente Tecnico MAG Nro.: 1979^FS"
                + "^FT422,864^A0N,20,19^FB374,1,0,C^FH\\^FDDr. med. vet. Kornelius Kaethler^FS"
                + "^FT25,980^A0N,28,28^FH\\^FDFecha Elab.: " + fechaElab + "^FS"
                + "^FT25,1014^A0N,28,28^FH\\^FDFecha Venc.: " + fechaVenc + "^FS"
                + "^FT25,1048^A0N,28,28^FH\\^FDLote: " + lote + "  Linea: " + linea + "  Turno: " + turno + "^FS"
                + "^FT25,1082^A0N,28,28^FH\\^FDSecuencia: " + fechaPrint + "0001^SFAAAAAAAAAAAAAAAAAAAAAdddd,1^FS"
                + "^FT412,975^A0N,24,23^FB363,1,0,R^FH\\^FDCooperativa Chortitzer Ltda.^FS"
                + "^FT412,1003^A0N,24,23^FB363,1,0,R^FH\\^FDHabilitacion SENACSA Nro. 832^FS"
                + "^FT412,1031^A0N,24,23^FB363,1,0,R^FH\\^FDAvda. Central 926 - Loma Plata^FS"
                + "^FT412,1059^A0N,24,23^FB363,1,0,R^FH\\^FDTel.: (0492) 418 605^FS"
                + "^FT412,1087^A0N,24,23^FB363,1,0,R^FH\\^FDINDUSTRA PARAGUAYA^FS"
                + "^PQ" + cantidad + ",0,1,Y"
                + "^XZ";
        return base;

    }

    private TblEtiquetadoraContenido getContenido(String formula) {
        try {
            return (TblEtiquetadoraContenido) em.createQuery("select i from TblEtiquetadoraContenido i where i.idFormula = " + formula).getSingleResult();
        } catch (NoResultException e) {
            Utils.messageBox("No hay datos suficientes para esta formula.");
            btnPrint.setEnabled(false);
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnPrint;
    private javax.swing.JComboBox cboLinea;
    private javax.swing.JComboBox cboPeso;
    private javax.swing.JComboBox cboProducto;
    private javax.swing.JComboBox cboTurno;
    private org.jdesktop.swingx.JXDatePicker dtpFechaElab;
    private org.jdesktop.swingx.JXDatePicker dtpFechaVenc;
    private javax.persistence.EntityManager em;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextArea txtIndicaciones;
    private javax.swing.JTextArea txtIngredientes;
    private javax.swing.JTextField txtLote;
    private javax.swing.JTextArea txtNiveles;
    private javax.swing.JTextField txtSenacsaReg;
    // End of variables declaration//GEN-END:variables
}
